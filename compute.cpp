#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/sha.h>
#include <openssl/ssl.h>
#include <openssl/hmac.h>
#include <openssl/evp.h>
#include <vector>
#include <string>
#include<iostream>
#include <codecvt>
#include <locale>
using namespace std;

unsigned char psswd[] = { 0 }, ssid[] = { 0 }, amac[] = { 0 }, smac[] = { 0 }, anonce[] = { 0 }, snonce[] = { 0 };
unsigned char min_Mac[6] = { 0 }, max_Mac[6] = { 0 }, min_Nonce[32] = { 0 }, max_Nonce[32] = { 0 };
unsigned char pmk[32] = { 0 }, ptk_data[100] = { 0 }, ptk[48] = { 0 }, kck[16] = { 0 }, mic[16] = { 0 };
unsigned char label[] = { "Pairwise key expansion" };
char hex_out[512] = {0};//≤‚ ‘

void mac_nonce_compare_create_data(
	unsigned char* anonce,
	unsigned char* snonce,
	unsigned char* amac,
	unsigned char* smac) {
	//cout << "max 1 mac data:" << max_Mac << endl;//≤‚ ‘
	//cout << "max mac open data:" << max_Mac << endl;//≤‚ ‘
	if (memcmp(amac, smac, 6)<=0)
	{
		memcpy(min_Mac, amac, 6);
		memcpy(max_Mac, smac, 6);
		//cout << "min mac data:" << min_Mac << endl;//≤‚ ‘
		//cout << "max mac data:" << max_Mac << endl;//≤‚ ‘
		////cout << "p_max mac data:" << &max_Mac << endl;//≤‚ ‘
	}
	else
	{
		memcpy(max_Mac, amac, 6);
		memcpy(min_Mac, smac, 6);
	}
	if (memcmp(anonce, snonce, 32) <= 0)
	{
		memcpy(min_Nonce, anonce, 32);
		memcpy(max_Nonce, snonce, 32);
	}
	else
	{
		memcpy(max_Nonce, anonce, 32);
		memcpy(min_Nonce, snonce, 32);
	}
	memcpy(ptk_data, label, 23);
	memcpy(ptk_data + 23, min_Mac, 6);
	memcpy(ptk_data + 29, max_Mac, 6);
	memcpy(ptk_data + 35, min_Nonce, 32);
	memcpy(ptk_data + 67, max_Nonce, 32);
	ptk_data[99] = 0x01;
}

void bin2hex(unsigned char* in, char* out) {
	const char hex[] = "0123456789ABCDEF";
	for (int i = 0; i < 32; i++) {
		out[2 * i] = hex[(in[i] >> 4) & 0x0F];  
		out[2 * i + 1] = hex[in[i] & 0x0F];     
	}
	out[32] = '\0'; 
}



void main_compute
(const char* p_passwd,
	unsigned char* p_ssid,
	int ssid_len,
	unsigned char *ptk_data,
	unsigned char* eapol_data){
	unsigned int* abc = 0;
	/*cout << ssid_len;*/
	PKCS5_PBKDF2_HMAC_SHA1(p_passwd,-1,
		p_ssid, ssid_len,4096,32,pmk);
	bin2hex(pmk, hex_out);
	cout << "pmk:" << hex_out << endl;
	//bin2hex(ptk_data, hex_out);
	//cout << hex_out;
	HMAC(EVP_sha1(), pmk, 32, ptk_data, 100, ptk, abc);

	bin2hex(ptk, hex_out);
	cout << "ptk:" << hex_out<<endl;
	memcpy(kck, ptk, 16);
	HMAC(EVP_md5(), kck, 16, eapol_data, 179, mic,abc);
	bin2hex(mic, hex_out);
	cout <<"mic:"<< hex_out;
}
void abc() {
	/*cin.get();*/
	char passwd[] = { "12345678" };//12345678
	unsigned char ssid[] = { 0x6f,0x6e,0x65,0x70,0x6c,0x75,0x73,0x20,0x32};//
	unsigned char amac[] = { 0xb6,0x76,0xd8,0x5e,0x01,0x4b };
	unsigned char smac[] = { 0xd4,0xd8,0x53,0xff,0x3e,0x12 };
	unsigned char anonce[] =
	{ 0x57,0xe4,0x72,0xc2,0x6e,0x84,0xc2,0xf9
	,0xb3,0x21,0x41,0xe6,0x9b,0x08,0x36,0x0c
	,0x17,0x73,0x3d,0x1d,0xaf,0xf1,0x01,0x44
	,0x76,0x88,0x42,0x82,0x68,0xee,0x6e,0x96 };
	unsigned char snonce[] =
	{ 0xdc,0xeb,0x5f,0x99,0xc9,0x37,0x4e,0xe0
	,0xbd,0x00,0x75,0xcd,0xd7,0x43,0x3a,0xd5
	,0xb9,0x06,0x5e,0x05,0xf1,0x13,0xe2,0x24
	,0xed,0x52,0x6b,0xb1,0x62,0x05,0x30,0x62 };
	unsigned char eapol_data[] =
	{ 0x00,0x00,0x12,0x00,0xee,0x00,0x00,0x00,0x10,0x02,0x85,0x09,0xc0,0x00,0xcd,0x9c
,0x62,0x00,0x88,0x01,0x3a,0x01,0xb6,0x76,0xd8,0x5e,0x01,0x4b,0xd4,0xd8,0x53,0xff
,0x3e,0x12,0xb6,0x76,0xd8,0x5e,0x01,0x4b,0x00,0x00,0x00,0x00,0xaa,0xaa,0x03,0x00
,0x00,0x00,0x88,0x8e,0x01,0x03,0x00,0x77,0x02,0x01,0x0a,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x01,0xdc,0xeb,0x5f,0x99,0xc9,0x37,0x4e,0xe0,0xbd,0x00,0x75
,0xcd,0xd7,0x43,0x3a,0xd5,0xb9,0x06,0x5e,0x05,0xf1,0x13,0xe2,0x24,0xed,0x52,0x6b
,0xb1,0x62,0x05,0x30,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x30,0x16,0x01,0x00,0x00,0x0f,0xac,0x04,0x01
,0x00,0x00,0x0f,0xac,0x04,0x01,0x00,0x00,0x0f,0xac,0x02,0x3c,0x00,0x00,0x00,0xb0
,0xe4,0x14,0xfc };
	mac_nonce_compare_create_data(anonce, snonce, amac, smac);
	const char *p_passwd= passwd;
	unsigned char* p_ssid = ssid;
	int ssid_len = sizeof(ssid);
	main_compute(p_passwd,p_ssid,ssid_len, ptk_data,eapol_data);
}